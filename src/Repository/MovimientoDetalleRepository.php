<?php

namespace App\Repository;

use App\Entity\MovimientoDetalle;
use App\Funciones;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CuentasCobrarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimientoDetalleRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, MovimientoDetalle::class);
    }

    public function eliminar($arrSeleccionados)
    {
        $objFuncion = new Funciones();
        $em = $this->getEntityManager();
        if ($arrSeleccionados) {
            try {
                foreach ($arrSeleccionados as $codigoMovimientoDetalle) {
                    $arMovimientoDetalle = $em->getRepository("App:MovimientoDetalle")->find($codigoMovimientoDetalle);
                    $em->remove($arMovimientoDetalle);
                }
                $em->flush();
            } catch (\Exception $exception) {
                $objFuncion->Mensaje("error", "No se puede eliminar el registro, se esta utilizando en el sistema.");
            }
        }
    }

    public function liquidar($codigoMovimiento)
    {
        $objFunciones = new Funciones();
        $em = $this->getEntityManager();
        $arMovimiento = $em->getRepository("App:Movimiento")->find($codigoMovimiento);
        /** @var  $arMovimientoDetalle MovimientoDetalle */
        $arMovimientosDetalles = $arMovimiento->getMovimientosDetallesMovimientoRel();
        $vrSubtotal = 0;
        $vrIva = 0;
        $vrDescuento = 0;
        $vrTotal = 0;
        try {
            foreach ($arMovimientosDetalles as $arMovimientoDetalle) {
                $vrSubtotalDetalle = $arMovimientoDetalle->getVrPrecio() * $arMovimientoDetalle->getCantidad();
                $vrDescuentoDetalle = ($vrSubtotalDetalle * $arMovimientoDetalle->getPorDescuento()) / 100;
                $vrIvaDealle = ($vrSubtotalDetalle * $arMovimientoDetalle->getPorIva()) / 100;
                $vrTotalDetalle = $vrSubtotalDetalle - $vrDescuento + $vrIvaDealle;

                $arMovimientoDetalle->setVrDescuento($vrDescuentoDetalle);
                $arMovimientoDetalle->setVrIva($vrIvaDealle);
                $arMovimientoDetalle->setVrSubtotal($vrSubtotalDetalle);
                $arMovimientoDetalle->setVrTotal($vrTotal);
                $em->persist($arMovimientoDetalle);

                $vrSubtotal += $vrSubtotalDetalle;
                $vrIva += $vrIvaDealle;
                $vrDescuento += $vrDescuentoDetalle;
                $vrTotal += $vrTotalDetalle;
            }

            $arMovimiento->setVrSubtotal($vrSubtotal);
            $arMovimiento->setVrIva($vrIva);
            $arMovimiento->setVrDescuento($vrDescuento);
            $arMovimiento->setVrTotal($vrTotal);
            $em->persist($arMovimiento);
            $em->flush();
        } catch (\Exception $exception) {
            $objFunciones->Mensaje("error", "Ocurrio un error al momento de actualizar los valores.");
        }
    }
}